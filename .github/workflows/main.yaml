name: Release

on:
  push:
    branches:
      - main

jobs:
  tag:
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.set_latest_tag.outputs.latest_tag }}
    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          token: ${{ secrets.GH_TOKEN }}
#      - name: Set up Go
#        uses: actions/setup-go@v4
#        with:
#          go-version: stable
#      - name: Tag version
#        id: tag_version
#        uses: mathieudutour/github-tag-action@v6.1
#        with:
#          github_token: ${{ secrets.GH_TOKEN }}
#          release_branches: main
#          tag_prefix: v
#      - name: Set latest tag output
#        id: set_latest_tag
#        run: |
#          if [[ -z "${{ steps.tag_version.outputs.new_tag }}" ]]; then
#            echo "latest_tag=${{ steps.tag_version.outputs.previous_tag }}" >> "$GITHUB_OUTPUT"
#          else
#            echo "latest_tag=${{ steps.tag_version.outputs.new_tag }}" >> "$GITHUB_OUTPUT"
#          fi
      - name: Save new tag
        id: save_new_tag
        run: |
#          version=${{ steps.tag_version.outputs.new_tag }}
#          version=${version#v}
          echo "1.8.15" > new_tag.txt
      - name: Upload new tag
        uses: actions/upload-artifact@v2
        with:
          name: new_tag
          path: new_tag.txt
#  release:
#    runs-on: ubuntu-latest
#    needs:
#      - tag
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          token: ${{ secrets.GH_TOKEN }}
#      - name: Set up Go
#        uses: actions/setup-go@v4
#        with:
#          go-version: stable
#      - name: Install cosign
#        run: |
#          curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
#          sudo mv cosign-linux-amd64 /usr/local/bin/cosign
#          sudo chmod +x /usr/local/bin/cosign
#      - name: Run GoReleaser
#        uses: goreleaser/goreleaser-action@v5
#        with:
#          distribution: goreleaser
#          version: latest
#          args: release --clean
#        env:
#          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
#          COSIGN_PWD: ${{ secrets.COSIGN_PWD }}
#          COSIGN_SECRET: ${{ secrets.COSIGN_SECRET }}
  sign-windows:
    runs-on: ubuntu-latest
    needs:
      - tag
#      - release
    steps:
      - name: Download new tag
        uses: actions/download-artifact@v2
        with:
          name: new_tag
      - name: Set new tag
        id: set_new_tag
        run: |
          echo "::set-output name=new_tag::$(cat new_tag.txt)"
      - uses: robinraju/release-downloader@v1.10
        id: download_release_386
        with:
          repository: "kaytu-io/pennywise"
          fileName: pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_386.exe
          latest: true
      - uses: robinraju/release-downloader@v1.10
        id: download_release_arm64
        with:
          repository: "kaytu-io/pennywise"
          fileName: pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_arm64.exe
          latest: true
      - uses: robinraju/release-downloader@v1.10
        id: download_release_amd64
        with:
          repository: "kaytu-io/pennywise"
          fileName: pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_amd64.exe
          latest: true
      - name: Sign executable
        id: sign_executable
        env:
          CODESIGN_KEY: ${{ secrets.SELFSIGNED_KEY}}
          CODESIGN_CRT: ${{ secrets.SELFSIGNED_CRT}}
        run: |
          sudo apt update -y && sudo apt -y install cmake libssl-dev libcurl4-openssl-dev zlib1g-dev python3
          sudo apt-get update -y
          sudo apt-get -y install osslsigncode
          echo "${{ secrets.SELFSIGNED_KEY }}" | base64 --decode > cert.key
          echo "${{ secrets.SELFSIGNED_CRT }}" | base64 --decode > cert.crt          
          osslsigncode sign -certs cert.crt -key cert.key -n "Pennywise" -i https://kaytu.io/ -in pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_386.exe -out pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_386_signed.exe
          zip pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_386_signed.zip pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_386_signed.exe
          osslsigncode sign -certs cert.crt -key cert.key -n "Pennywise" -i https://kaytu.io/ -in pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_arm64.exe -out pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_arm64_signed.exe
          zip pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_arm64_signed.zip pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_arm64_signed.exe
          osslsigncode sign -certs cert.crt -key cert.key -n "Pennywise" -i https://kaytu.io/ -in pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_amd64.exe -out pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_amd64_signed.exe
          zip pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_amd64_signed.zip pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_amd64_signed.exe
          export UPLOAD_URL=$(curl --silent "https://api.github.com/repos/kaytu-io/pennywise/releases/latest" | jq -r .upload_url)
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
          token=(echo "${{ secrets.GH_TOKEN }}" | base64 --decode)
          echo $token
          echo "---"
          release_id=$(curl --request GET \
            --url https://api.github.com/repos/kaytu-io/pennywise/releases/latest \
            --header 'authorization: Bearer ' | jq '.id')
          echo $release_id
          assets=$(curl --request GET \
            --url https://api.github.com/repos/kaytu-io/pennywise/releases/$release_id/assets \
            --header 'authorization: Bearer ${{ secrets.GH_TOKEN }}')
          echo $assets
          windows386=$(echo $assets | jq '.[] | select(.name=="pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_386.exe") | .id')
          arm64=$(echo $assets | jq '.[] | select(.name=="pennywise_${{ steps.set_new_tag.outputs.new_tag }}_arm64.exe") | .id')
          amd64=$(echo $assets | jq '.[] | select(.name=="pennywise_${{ steps.set_new_tag.outputs.new_tag }}_amd64.exe") | .id')
          curl --request DELETE \
            --url https://api.github.com/repos/kaytu-io/pennywise/releases/assets/$windows386 \
            --header 'authorization: Bearer ${{ secrets.GH_TOKEN }}'
          curl --request DELETE \
                      --url https://api.github.com/repos/kaytu-io/pennywise/releases/assets/$arm64 \
                      --header 'authorization: Bearer ${{ secrets.GH_TOKEN }}'
          curl --request DELETE \
                      --url https://api.github.com/repos/kaytu-io/pennywise/releases/assets/$amd64 \
                      --header 'authorization: Bearer ${{ secrets.GH_TOKEN }}'
      - name: Upload Release Asset 386
        id: upload-release-asset-386
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.sign_executable.outputs.upload_url }}
          asset_path: ./pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_386_signed.exe
          asset_name: pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_386.exe
          asset_content_type: application/octet-stream
      - name: Upload Release Asset 386 zip
        id: upload-release-asset-386-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.sign_executable.outputs.upload_url }}
          asset_path: ./pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_386_signed.zip
          asset_name: pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_386.zip
          asset_content_type: application/zip
      - name: Upload Release Asset arm64
        id: upload-release-asset-arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.sign_executable.outputs.upload_url }}
          asset_path: ./pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_arm64_signed.exe
          asset_name: pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_arm64.exe
          asset_content_type: application/octet-stream
      - name: Upload Release Asset arm64 zip
        id: upload-release-asset-arm64-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.sign_executable.outputs.upload_url }}
          asset_path: ./pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_arm64_signed.zip
          asset_name: pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_arm64.zip
          asset_content_type: application/zip
      - name: Upload Release Asset
        id: upload-release-asset-amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.sign_executable.outputs.upload_url }}
          asset_path: ./pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_amd64_signed.exe
          asset_name: pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_amd64.exe
          asset_content_type: application/octet-stream
      - name: Upload Release Asset amd64 zip
        id: upload-release-asset-amd64-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.sign_executable.outputs.upload_url }}
          asset_path: ./pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_amd64_signed.zip
          asset_name: pennywise_${{ steps.set_new_tag.outputs.new_tag }}_windows_amd64.zip
          asset_content_type: application/zip