name: Release

on:
  push:
    branches:
      - main

jobs:
#  tag:
#    runs-on: ubuntu-latest
#    outputs:
#      latest_tag: ${{ steps.set_latest_tag.outputs.latest_tag }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          token: ${{ secrets.GH_TOKEN }}
#      - name: Set up Go
#        uses: actions/setup-go@v4
#        with:
#          go-version: stable
#      - name: Tag version
#        id: tag_version
#        uses: mathieudutour/github-tag-action@v6.1
#        with:
#          github_token: ${{ secrets.GH_TOKEN }}
#          release_branches: main
#          tag_prefix: v
#      - name: Set latest tag output
#        id: set_latest_tag
#        run: |
#          if [[ -z "${{ steps.tag_version.outputs.new_tag }}" ]]; then
#            echo "latest_tag=${{ steps.tag_version.outputs.previous_tag }}" >> "$GITHUB_OUTPUT"
#          else
#            echo "latest_tag=${{ steps.tag_version.outputs.new_tag }}" >> "$GITHUB_OUTPUT"
#          fi
#  release:
#    runs-on: ubuntu-latest
#    needs:
#      - tag
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          token: ${{ secrets.GH_TOKEN }}
#      - name: Set up Go
#        uses: actions/setup-go@v4
#        with:
#          go-version: stable
#      - name: Install cosign
#        run: |
#          curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
#          sudo mv cosign-linux-amd64 /usr/local/bin/cosign
#          sudo chmod +x /usr/local/bin/cosign
#      - name: Run GoReleaser
#        uses: goreleaser/goreleaser-action@v5
#        with:
#          distribution: goreleaser
#          version: latest
#          args: release --clean
#        env:
#          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
#          COSIGN_PWD: ${{ secrets.COSIGN_PWD }}
#          COSIGN_SECRET: ${{ secrets.COSIGN_SECRET }}
  sign-windows:
    runs-on: ubuntu-latest
#    needs:
#      - release
    steps:
      - uses: robinraju/release-downloader@v1.10
        id: download_release
        with:
          repository: "kaytu-io/pennywise"
          fileName: "pennywise_1.8.8_windows_386.exe"
          latest: true
      - name: Sign executable
        id: sign_executable
        env:
          CODESIGN_KEY: ${{ secrets.SELFSIGNED_KEY}}
          CODESIGN_CRT: ${{ secrets.SELFSIGNED_CRT}}
        run: |
          sudo apt update -y && sudo apt -y install cmake libssl-dev libcurl4-openssl-dev zlib1g-dev python3
          sudo apt-get update -y
          sudo apt-get -y install osslsigncode
          echo "${{ secrets.SELFSIGNED_KEY }}" | base64 --decode > cert.key
          echo "${{ secrets.SELFSIGNED_CRT }}" | base64 --decode > cert.crt
          echo "${{ fromJson(steps.download_release.outputs.downloaded_files)[0] }}" > pennywise_1.8.3_windows_386.exe
          osslsigncode sign -certs cert.crt -key cert.key -n "Pennywise" -i https://kaytu.io/ -in pennywise_1.8.8_windows_386.exe -out pennywise_1.8.8_windows_386_signed.exe
          export pennywise_windows_signed=$(cat pennywise_1.8.8_windows_386_signed.exe)
          echo "RELEASE_BODY=$pennywise_windows_signed" >> $GITHUB_OUTPUT
      - name: Upload Binaries to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_name: "kaytu-io/pennywise"
          repo_token: ${{ secrets.GH_TOKEN }}
          tag: ${{ github.ref }}
          file: target/release/pennywise_windows_signed
          overwrite: true
          body: |
              ${{ steps.sign_executable.outputs.RELEASE_BODY }}